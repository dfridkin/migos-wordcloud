mod.in.team <- any(InTeam(moderator, sub))
return(mod.in.team)
})
which.teams <- names(which(results == TRUE))
return(which.teams)
}
# TODO: Make this link the subs, too
AllLinkedSubs = function(mod.team, subs.list){
results = unlist(sapply(mod.team, function(mod){WhichTeams(mod, subs.list)}))
results = sort(table(results), decreasing = TRUE)
return(results)
}
# Testing here -----------------------------------------------------------------
sub.names <- GetManySubs(1, 6)
#mods.list <- GetManyMods(sub.names)
test.request <- Async$new(
urls <- as.character(vapply(sub.names, GenModReqURL, character(1), USE.NAMES = FALSE))
)
test.results <- test.request$get()
parsed.results <- sapply(test.results, function(item){
fromJSON(item$parse('UTF-8'))$data$children$name
}, USE.NAMES = FALSE)
names(parsed.results) <- vapply(test.results, function(x){
strsplit(x$url, '/')[[1]][5]
}, character(1), USE.NAMES = FALSE)
sub.names <- GetManySubs(1, 3)
#mods.list <- GetManyMods(sub.names)
test.request <- Async$new(
urls <- as.character(vapply(sub.names, GenModReqURL, character(1), USE.NAMES = FALSE))
)
test.results <- test.request$get()
parsed.results <- sapply(test.results, function(item){
fromJSON(item$parse('UTF-8'))$data$children$name
}, USE.NAMES = FALSE)
names(parsed.results) <- vapply(test.results, function(x){
strsplit(x$url, '/')[[1]][5]
}, character(1), USE.NAMES = FALSE)
sub.names <- GetManySubs(1, 3)
#mods.list <- GetManyMods(sub.names)
test.request <- Async$new(
urls <- as.character(vapply(sub.names, GenModReqURL, character(1), USE.NAMES = FALSE))
)
test.results <- test.request$get()
parsed.results <- sapply(test.results, function(item){
fromJSON(item$parse('UTF-8'))$data$children$name
}, USE.NAMES = FALSE)
names(parsed.results) <- vapply(test.results, function(x){
strsplit(x$url, '/')[[1]][5]
}, character(1), USE.NAMES = FALSE)
sub.names <- GetManySubs(1, 3)
#mods.list <- GetManyMods(sub.names)
test.request <- Async$new(
urls <- as.character(vapply(sub.names, GenModReqURL, character(1), USE.NAMES = FALSE))
)
test.results <- test.request$get()
parsed.results <- sapply(test.results, function(item){
fromJSON(item$parse('UTF-8'))$data$children$name
}, USE.NAMES = FALSE)
names(parsed.results) <- vapply(test.results, function(x){
strsplit(x$url, '/')[[1]][5]
}, character(1), USE.NAMES = FALSE)
sub.names <- GetManySubs(1, 3)
#mods.list <- GetManyMods(sub.names)
test.request <- Async$new(
urls <- as.character(vapply(sub.names, GenModReqURL, character(1), USE.NAMES = FALSE))
)
test.results <- test.request$get()
parsed.results <- sapply(test.results, function(item){
fromJSON(item$parse('UTF-8'))$data$children$name
}, USE.NAMES = FALSE)
names(parsed.results) <- vapply(test.results, function(x){
strsplit(x$url, '/')[[1]][5]
}, character(1), USE.NAMES = FALSE)
sub.names <- GetManySubs(1, 3)
#mods.list <- GetManyMods(sub.names)
test.request <- Async$new(
urls <- as.character(vapply(sub.names, GenModReqURL, character(1), USE.NAMES = FALSE))
)
test.results <- test.request$get()
parsed.results <- sapply(test.results, function(item){
fromJSON(item$parse('UTF-8'))$data$children$name
}, USE.NAMES = FALSE)
names(parsed.results) <- vapply(test.results, function(x){
strsplit(x$url, '/')[[1]][5]
}, character(1), USE.NAMES = FALSE)
sub.names <- GetManySubs(1, 2)
#mods.list <- GetManyMods(sub.names)
test.request <- Async$new(
urls <- as.character(vapply(sub.names, GenModReqURL, character(1), USE.NAMES = FALSE))
)
test.results <- test.request$get()
parsed.results <- sapply(test.results, function(item){
fromJSON(item$parse('UTF-8'))$data$children$name
}, USE.NAMES = FALSE)
names(parsed.results) <- vapply(test.results, function(x){
strsplit(x$url, '/')[[1]][5]
}, character(1), USE.NAMES = FALSE)
sub.names <- GetManySubs(1, 3)
#mods.list <- GetManyMods(sub.names)
test.request <- Async$new(
urls <- as.character(vapply(sub.names, GenModReqURL, character(1), USE.NAMES = FALSE))
)
test.results <- test.request$get()
parsed.results <- sapply(test.results, function(item){
fromJSON(item$parse('UTF-8'))$data$children$name
}, USE.NAMES = FALSE)
names(parsed.results) <- vapply(test.results, function(x){
strsplit(x$url, '/')[[1]][5]
}, character(1), USE.NAMES = FALSE)
sub.names <- GetManySubs(1, 3)
#mods.list <- GetManyMods(sub.names)
test.request <- Async$new(
urls <- as.character(vapply(sub.names, GenModReqURL, character(1), USE.NAMES = FALSE))
)
test.results <- test.request$get()
parsed.results <- sapply(test.results, function(item){
fromJSON(item$parse('UTF-8'))$data$children$name
}, USE.NAMES = FALSE)
names(parsed.results) <- vapply(test.results, function(x){
strsplit(x$url, '/')[[1]][5]
}, character(1), USE.NAMES = FALSE)
sub.names <- GetManySubs(1, 3)
#mods.list <- GetManyMods(sub.names)
test.request <- Async$new(
urls <- as.character(vapply(sub.names, GenModReqURL, character(1), USE.NAMES = FALSE))
)
test.results <- test.request$get()
parsed.results <- sapply(test.results, function(item){
fromJSON(item$parse('UTF-8'))$data$children$name
}, USE.NAMES = FALSE)
names(parsed.results) <- vapply(test.results, function(x){
strsplit(x$url, '/')[[1]][5]
}, character(1), USE.NAMES = FALSE)
sub.names <- GetManySubs(1, 3)
#mods.list <- GetManyMods(sub.names)
test.request <- Async$new(
urls <- as.character(vapply(sub.names, GenModReqURL, character(1), USE.NAMES = FALSE))
)
test.results <- test.request$get()
parsed.results <- sapply(test.results, function(item){
fromJSON(item$parse('UTF-8'))$data$children$name
}, USE.NAMES = FALSE)
names(parsed.results) <- vapply(test.results, function(x){
strsplit(x$url, '/')[[1]][5]
}, character(1), USE.NAMES = FALSE)
sub.names <- GetManySubs(1, 3)
#mods.list <- GetManyMods(sub.names)
test.request <- Async$new(
urls <- as.character(vapply(sub.names, GenModReqURL, character(1), USE.NAMES = FALSE))
)
test.results <- test.request$get()
parsed.results <- sapply(test.results, function(item){
fromJSON(item$parse('UTF-8'))$data$children$name
}, USE.NAMES = FALSE)
names(parsed.results) <- vapply(test.results, function(x){
strsplit(x$url, '/')[[1]][5]
}, character(1), USE.NAMES = FALSE)
sub.names <- GetManySubs(1, 3)
#mods.list <- GetManyMods(sub.names)
test.request <- Async$new(
urls <- as.character(vapply(sub.names, GenModReqURL, character(1), USE.NAMES = FALSE))
)
test.results <- test.request$get()
parsed.results <- sapply(test.results, function(item){
fromJSON(item$parse('UTF-8'))$data$children$name
}, USE.NAMES = FALSE)
names(parsed.results) <- vapply(test.results, function(x){
strsplit(x$url, '/')[[1]][5]
}, character(1), USE.NAMES = FALSE)
a = matrix(nrow = 3, ncol = 3)
a
b = a
a = matrix(data = c(4,-1,0,1,0,3,4,.5,1), nrow = 3)
a
b = matrix(c(7, 5, -4, -1, 5, 0, 0, 2, 6), nrow = 3)
b
a * b
a %*% b
(9000 * .15) + (2000 * .65) + (8000 * .22)
(9000 * .85) + (2000 * .65) + (8000 * .22)
(9000 * .15) + (2000 * .35) + (8000 * .78)
(9000 * .85) + (2000 * .65) + (8000 * .22)
(9000 * .85) + (2000 * .65) + (8000 * .22) + 8290
9000 + 2000 + 8000
sqrt( ( 9.6 * 10^6) ^ 2 + (-4.4 * 10 ^ 7) ^ 2)
sqrt( (( 9.6 * 10^6) ^ 2) + ((-4.4 * 10 ^ 7) ^ 2) )
sqrt( 4^2 + 9^2 + 7^2)
sqrt( 4^2 + 9^2 + 7^2) * 10^6
sqrt(12083046)
sqrt( 4^2 + 9^2 + 7^2)
x = c(0, 23, 45, 67)
y = c(111.32, 102.47, 78.71, 43.496)
plot(x, y)
model <- lm(y ~ poly(x, 2))
lines(model)
plot(model)
points(model)
plot(model)
plot(fitted(model))
x
y
part = .1
vid = .05
pech = .1
pap1 = .75
pap2 = .075
pap1 = .075
videss = .2
pitch = .05
proj = .2
port = .15
part + vid + pech * 0 + pap1 * 0 + pap2 + videss + pitch + proj + port
part * 0 + vid + pech * 0 + pap1 * 0 + pap2 + videss + pitch + proj + port
part * 5 + vid + pech * 0 + pap1 * 0 + pap2 + videss + pitch + proj + port
part * .55 + vid + pech * 0 + pap1 * 0 + pap2 + videss + pitch + proj + port
part * .6 + vid + pech * 0 + pap1 * 0 + pap2 + videss + pitch + proj + port
part * .8 + vid + pech * 0 + pap1 * 0 + pap2 + videss + pitch + proj + port
part * .75 + vid + pech * 0 + pap1 * 0 + pap2 + videss + pitch + proj + port
part = .1
vid = .05
pech = .1
pap1 = .075
pap2 = .075
videss = .2
pitch = .05
proj = .2
port = .15
part + vid + pech * 0 + pap1 * 0 + pap2 + videss + pitch + proj + port
part * .6 + vid + pech * 0 + pap1 * 0 + pap2 + videss + pitch + proj + port
4 + 1 + 4 + 3
(4 + 1 + 4 + 3) / 3
(4 + 1 + 4 + 3 * .7) / 3
4 * 4 + 1 * 4 + 4 * 4
(4 * 4 + 1 * 4 + 4 * 4 + 3 * 2) / 12
(4 * 4 + 1 * 4 + 4 * 4 + 3 * 0) / 12
part * .8 + vid + pech * .6 + pap1 * 0 + pap2 + videss + pitch + proj + port
part + vid + pech * .6 + pap1 * 0 + pap2 + videss + pitch + proj + port
part + vid + pech * .8 + pap1 * 0 + pap2 + videss + pitch + proj + port
part + vid + pech * .6 + pap1 * .6 + pap2 + videss + pitch + proj + port
install.packages('wordcloud2')
library(wordcloud2)
?wordcloud2
cwd()
getwd()
cd '/Users/danielfridkin/Documents/GitHub/migos-wordcloud'
cd('/Users/danielfridkin/Documents/GitHub/migos-wordcloud')
cwd('/Users/danielfridkin/Documents/GitHub/migos-wordcloud')
?cd
?cwd
setwd('/Users/danielfridkin/Documents/GitHub/migos-wordcloud')
getwd()
ls
ls()
library(jsonlite)
read_json('lyrics.json')
lyrics = read_json('lyrics.json')
lyrics[[1]]
length(lyrics)
table(lyrics[[1]])
strsplit('hello friend', ' ')
table(strsplit(lyrics[[1]], ' '))
sort(table(strsplit(lyrics[[1]], ' ')))
sort(table(tolower(strsplit(lyrics[[1]], ' '))))
sort(table(tolower(strsplit(lyrics[[1]], ' '))))
lyrics_raw = read_json('lyrics.json')
i = 1
lyrics_arr = strsplit(lyrics_raw[[i]])
lyrics_arr = strsplit(lyrics_raw[[i]], ' ')
tolower(lyrics_arr)
lyrics_arr
sort(table(tolower(lyrics_arr)))
tolower(lyrics_arr)
?tolower
lyrics_arr = strsplit(lyrics_raw[[i]], ' ')[[1]]
lyrics_arr
tolower(lyrics_arr)
lyrics_arr = sort(table(tolower(lyrics_arr)))
lyrics_arr
library(wordcloud2)
library(jsonlite)
lyrics_raw = read_json('lyrics.json')
lyrics_vec = c()
for(i in 1:length(lyrics_raw)){
curr_lyrics_vec = strsplit(lyrics_raw[[i]], ' ')[[1]]
curr_lyrics_vec = tolower(curr_lyrics_vec)
lyrics_vec = append(lyrics_vec, curr_lyrics_vec)
}
sort(table(lyrics_vec))
sort(table(lyrics_vec), decreasing = TRUE)
library(wordcloud2)
library(jsonlite)
lyrics_raw = read_json('lyrics.json')
lyrics_vec = c()
for(i in 1:length(lyrics_raw)){
curr_lyrics_vec = strsplit(lyrics_raw[[i]], ' ')[[1]]
curr_lyrics_vec = tolower(curr_lyrics_vec)
lyrics_vec = append(lyrics_vec, curr_lyrics_vec)
}
lyrics_vec = sort(table(lyrics_vec), decreasing = TRUE)
lyrics_df <- data.frame('word' = names(lyrics_vec),
'freq' = as.integer(lyrics_vec))
View(lyrics_df)
lyrics_df[-1:20,]
lyrics_df[-c(1:20),]
library(wordcloud2)
library(jsonlite)
lyrics_raw = read_json('lyrics.json')
lyrics_vec = c()
for(i in 1:length(lyrics_raw)){
curr_lyrics_vec = strsplit(lyrics_raw[[i]], ' ')[[1]]
curr_lyrics_vec = tolower(curr_lyrics_vec)
lyrics_vec = append(lyrics_vec, curr_lyrics_vec)
}
sorted_lyrics = sort(table(lyrics_vec), decreasing = TRUE)
library(wordcloud2)
library(jsonlite)
lyrics_raw = read_json('lyrics.json')
lyrics_vec = c()
for(i in 1:length(lyrics_raw)){
curr_lyrics_vec = strsplit(lyrics_raw[[i]], ' ')[[1]]
curr_lyrics_vec = tolower(curr_lyrics_vec)
lyrics_vec = append(lyrics_vec, curr_lyrics_vec)
}
sorted_lyrics = sort(table(lyrics_vec), decreasing = TRUE)
?gsub
test = c('hey', 'he@o', 'hey,,0', '\n')
test
gsub([:punct:], '', test)
gsub('[:punct:]', '', test)
gsub([[:punct:]], '', test)
gsub('[[:punct:]]', '', test)
library(wordcloud2)
library(jsonlite)
lyrics_raw = read_json('lyrics.json')
lyrics_vec = c()
for(i in 1:length(lyrics_raw)){
curr_lyrics_vec = strsplit(lyrics_raw[[i]], ' ')[[1]]
curr_lyrics_vec = gsub('[[:punct:]]', '', tolower(curr_lyrics_vec))
lyrics_vec = append(lyrics_vec, curr_lyrics_vec)
}
sorted_lyrics = sort(table(lyrics_vec), decreasing = TRUE)
lyrics_df <- data.frame('word' = names(lyrics_vec),
'freq' = as.integer(lyrics_vec))
# The first twenty or so words are unimportant anyway
lyrics_df <- lyrics_df[-c(1:20),]
sorted_lyrics = sort(table(lyrics_vec), decreasing = TRUE)
lyrics_df <- data.frame('word' = names(sorted_lyrics),
'freq' = as.integer(sorted_lyrics))
# The first twenty or so words are unimportant anyway
lyrics_df <- lyrics_df[-c(1:20),]
View(lyrics_df)
lyrics_df <- data.frame('word' = names(sorted_lyrics),
'freq' = as.integer(sorted_lyrics))
library(wordcloud2)
library(jsonlite)
lyrics_raw = read_json('lyrics.json')
lyrics_vec = c()
for(i in 1:length(lyrics_raw)){
curr_lyrics_vec = strsplit(lyrics_raw[[i]], ' ')[[1]]
curr_lyrics_vec = gsub('[[:punct:]]', '', tolower(curr_lyrics_vec))
lyrics_vec = append(lyrics_vec, curr_lyrics_vec)
}
sorted_lyrics = sort(table(lyrics_vec), decreasing = TRUE)
lyrics_df <- data.frame('word' = names(sorted_lyrics),
'freq' = as.integer(sorted_lyrics))
# The first twenty or so words are unimportant anyway
lyrics_df <- lyrics_df[-c(1:20),]
wordcloud2(lyrics_df, figPath = 'yrn-silhouette.jpg')
?wordcloud2
wordcloud2(lyrics_df, figPath = 'yrn-silhouette.jpg', background-color = 'black',
shuffle = FALSE)
wordcloud2(lyrics_df, figPath = 'yrn-silhouette.jpg', backgroundColor = 'black',
shuffle = FALSE)
wordcloud2(lyrics_df, figPath = 'yrn-silhouette.jpg', backgroundColor = 'black',
shuffle = FALSE, color = 'gold')
wordcloud2(lyrics_df, figPath = 'yrn-silhouette.jpg', backgroundColor = 'black',
shuffle = FALSE, color = 'gold', size = 0.5)
install.packages('webshot')
library(wordcloud2)
library(jsonlite)
library(webshot)
webshot::install_phantomjs()
library(htmlwidgets)
# and in pdf
webshot("tmp.html","fig_1.pdf", delay =5, vwidth = 480, vheight=480)
lyrics_raw = read_json('lyrics.json')
lyrics_vec = c()
for(i in 1:length(lyrics_raw)){
curr_lyrics_vec = strsplit(lyrics_raw[[i]], ' ')[[1]]
curr_lyrics_vec = gsub('[[:punct:]]', '', tolower(curr_lyrics_vec))
lyrics_vec = append(lyrics_vec, curr_lyrics_vec)
}
sorted_lyrics = sort(table(lyrics_vec), decreasing = TRUE)
lyrics_df <- data.frame('word' = names(sorted_lyrics),
'freq' = as.integer(sorted_lyrics))
# The first twenty or so words are unimportant anyway
lyrics_df <- lyrics_df[-c(1:20),]
cloud = wordcloud2(lyrics_df, figPath = 'yrn-silhouette.jpg',
backgroundColor = 'black', shuffle = FALSE, color = 'gold',
size = 0.5)
saveWidget(cloud,"tmp.html",selfcontained = F)
webshot("tmp.html","cloud.pdf", delay =20, vwidth = 1000, vheight=1000)
?jpeg
library(wordcloud2)
library(jsonlite)
library(webshot)
webshot::install_phantomjs()
library(htmlwidgets)
lyrics_raw = read_json('lyrics.json')
lyrics_vec = c()
for(i in 1:length(lyrics_raw)){
curr_lyrics_vec = strsplit(lyrics_raw[[i]], ' ')[[1]]
curr_lyrics_vec = gsub('[[:punct:]]', '', tolower(curr_lyrics_vec))
lyrics_vec = append(lyrics_vec, curr_lyrics_vec)
}
sorted_lyrics = sort(table(lyrics_vec), decreasing = TRUE)
lyrics_df <- data.frame('word' = names(sorted_lyrics),
'freq' = as.integer(sorted_lyrics))
# The first twenty or so words are unimportant anyway
lyrics_df <- lyrics_df[-c(1:20),]
cloud = wordcloud2(lyrics_df, figPath = 'yrn-silhouette.jpg',
backgroundColor = 'black', shuffle = FALSE, color = 'gold',
size = 0.5)
saveWidget(cloud,"tmp.html",selfcontained = F)
webshot("tmp.html","cloud.pdf", delay =20, vwidth = 1000, vheight=1000)
?wordcloud2Output
library(wordcloud2)
library(jsonlite)
library(webshot)
#webshot::install_phantomjs()
#library(htmlwidgets)
lyrics_raw = read_json('lyrics.json')
lyrics_vec = c()
for(i in 1:length(lyrics_raw)){
curr_lyrics_vec = strsplit(lyrics_raw[[i]], ' ')[[1]]
curr_lyrics_vec = gsub('[[:punct:]]', '', tolower(curr_lyrics_vec))
lyrics_vec = append(lyrics_vec, curr_lyrics_vec)
}
sorted_lyrics = sort(table(lyrics_vec), decreasing = TRUE)
lyrics_df <- data.frame('word' = names(sorted_lyrics),
'freq' = as.integer(sorted_lyrics))
# The first twenty or so words are unimportant anyway
lyrics_df <- lyrics_df[-c(1:20),]
#cloud =
wordcloud2(lyrics_df, figPath = 'yrn-silhouette.jpg',
backgroundColor = 'black', shuffle = FALSE, color = 'gold',
size = 0.5)
#saveWidget(cloud,"tmp.html",selfcontained = F)
#webshot("tmp.html","cloud.pdf", delay =20, vwidth = 1000, vheight=1000)
library(wordcloud2)
library(jsonlite)
lyrics_raw = read_json('lyrics.json')
lyrics_vec = c()
for(i in 1:length(lyrics_raw)){
curr_lyrics_vec = strsplit(lyrics_raw[[i]], ' ')[[1]]
curr_lyrics_vec = gsub('[[:punct:]]', '', tolower(curr_lyrics_vec))
lyrics_vec = append(lyrics_vec, curr_lyrics_vec)
}
sorted_lyrics = sort(table(lyrics_vec), decreasing = TRUE)
lyrics_df <- data.frame('word' = names(sorted_lyrics),
'freq' = as.integer(sorted_lyrics))
# The first twenty or so words are unimportant anyway
lyrics_df <- lyrics_df[-c(1:20),]
cloud = wordcloud2(lyrics_df, figPath = 'yrn-silhouette.jpg',
backgroundColor = 'black', shuffle = FALSE, color = 'gold',
size = 0.5)
library(webshot)
webshot::install_phantomjs()
saveWidget(cloud,"1.html",selfcontained = F)
webshot::webshot("1.html","1.png",vwidth = 1992, vheight = 1744, delay =10)
?webshot
library(wordcloud2)
library(jsonlite)
lyrics_raw = read_json('lyrics.json')
lyrics_vec = c()
for(i in 1:length(lyrics_raw)){
curr_lyrics_vec = strsplit(lyrics_raw[[i]], ' ')[[1]]
curr_lyrics_vec = gsub('[[:punct:]]', '', tolower(curr_lyrics_vec))
lyrics_vec = append(lyrics_vec, curr_lyrics_vec)
}
sorted_lyrics = sort(table(lyrics_vec), decreasing = TRUE)
lyrics_df <- data.frame('word' = names(sorted_lyrics),
'freq' = as.integer(sorted_lyrics))
# The first twenty or so words are unimportant anyway
lyrics_df <- lyrics_df[-c(1:20),]
cloud = wordcloud2(lyrics_df, figPath = 'yrn-silhouette.jpg',
backgroundColor = 'black', shuffle = FALSE, color = 'gold',
size = 0.5)
library(webshot)
webshot::install_phantomjs()
saveWidget(cloud,"cloud.html",selfcontained = F)
webshot::webshot("cloud.html","cloud.png",vwidth = 1000, vheight = 1000, delay =10, eval = "location.reload")
?saveWidget
library(wordcloud2)
library(jsonlite)
library(htmlwidgets)
lyrics_raw = read_json('lyrics.json')
lyrics_vec = c()
for(i in 1:length(lyrics_raw)){
curr_lyrics_vec = strsplit(lyrics_raw[[i]], ' ')[[1]]
curr_lyrics_vec = gsub('[[:punct:]]', '', tolower(curr_lyrics_vec))
lyrics_vec = append(lyrics_vec, curr_lyrics_vec)
}
sorted_lyrics = sort(table(lyrics_vec), decreasing = TRUE)
lyrics_df <- data.frame('word' = names(sorted_lyrics),
'freq' = as.integer(sorted_lyrics))
# The first twenty or so words are unimportant anyway
lyrics_df <- lyrics_df[-c(1:20),]
cloud = wordcloud2(lyrics_df, figPath = 'yrn-silhouette.jpg',
backgroundColor = 'black', shuffle = FALSE, color = 'gold',
size = 0.5)
saveWidget(cloud,"cloud.html",selfcontained = F)
